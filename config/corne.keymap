/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        holdtap_TUI: holdtap_TUI {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            label = "HOLDTAP_TUI";
        };

        tapdance_tab_esc: tapdance_tab_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TAB_ESC";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp ESC>;
        };

        tapdance_Mznak: tapdance_Mznak {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_MZNAK";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RBKT>;
        };

        tapdance_slash: tapdance_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_SLASH";
            #binding-cells = <0>;
            bindings = <&kp KP_SLASH>, <&kp BACKSLASH>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&tapdance_tab_esc  &kp Q  &kp W  &kp E          &kp R        &kp T        &kp Y      &kp U            &kp I      &kp O    &kp P     &kp BSPC
&mt LSHIFT GRAVE   &kp A  &kp S  &kp D          &kp F        &kp G        &kp H      &kp J            &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL          &kp Z  &kp X  &kp C          &kp V        &kp B        &kp N      &tapdance_Mznak  &kp COMMA  &kp DOT  &kp FSLH  &kp LEFT_BRACKET
                                 &mt LALT LGUI  &lt 1 SPACE  &kp ENTER    &kp ENTER  &mo 2            &tog 4
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC     &trans        &trans    &kp UP    &kp LS(LCTRL)  &kp ASTERISK       &kp EQUAL       &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans     &kp BSPC
&kp LSHIFT  &kp LG(UP)    &kp LEFT  &kp DOWN  &kp RIGHT      &kp PLUS           &kp KP_MINUS    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PG_UP  &kp PSCRN
&kp LCTRL   &kp LG(DOWN)  &trans    &trans    &kp DEL        &tapdance_slash    &kp UNDERSCORE  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PG_DN  &kp TILDE
                                    &trans    &trans         &kp ENTER          &kp SPACE       &kp KP_NUMBER_0  &kp KP_DOT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans      &trans  &trans  &trans   &trans   &trans       &trans     &kp AMPERSAND    &kp ASTRK    &kp LPAR   &kp RPAR          &kp BSPC
&kp LSHIFT  &kp F1  &kp F2  &kp F3   &kp F4   &kp F5       &trans     &kp DOLLAR       &kp PERCENT  &kp LCTRL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp LCTRL   &kp F6  &kp F7  &kp F10  &kp F11  &kp F12      &trans     &kp EXCLAMATION  &kt AT_SIGN  &kp HASH   &kp LEFT_BRACE    &kp RIGHT_BRACE
                            &trans   &mo 3    &kp SPACE    &kp ENTER  &trans           &kp LALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &bt BT_PRV  &bt BT_NXT    &bt BT_CLR_ALL  &bt BT_CLR      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &out OUT_TOG  &out OUT_BLE    &out OUT_USB    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans        &trans          &trans          &trans  &trans  &trans  &trans  &trans  &trans
                            &trans        &trans          &trans          &trans  &trans  &trans
            >;
        };

        games_layer {
            bindings = <
&kp ESC  &kp TAB     &kp Q  &kp W     &kp E      &kp R        &kp Y   &trans  &trans  &trans  &trans  &trans
&trans   &kp LSHIFT  &kp A  &kp S     &kp D      &kp F        &kp G   &trans  &trans  &trans  &trans  &trans
&trans   &kp LCTRL   &kp Z  &kp X     &kp C      &kp T        &trans  &trans  &trans  &trans  &trans  &trans
                            &kp LALT  &kp SPACE  &kp ENTER    &trans  &trans  &trans
            >;
        };
    };
};
